[tool.poetry]
name = "griptape"
version = "0.32.0"
description = "Modular Python framework for LLM workflows, tools, memory, and data."
authors = ["Griptape <hello@griptape.ai>"]
license = "Apache 2.0"
readme = "README.md"
repository = "https://github.com/griptape-ai/griptape"

packages = [
    {include = "griptape"}
]

[tool.poetry.dependencies]
python = "^3.9"
openai = "^1.1.1"
attrs = "^24.2.0"
jinja2 = "^3.1.4"
marshmallow = "^3.21.3"
marshmallow-enum = "^1.5.1"
tiktoken = "^0.7"
rich = "^13.7.1"
schema = "^0.7.7"
pyyaml = "^6.0.1"
tenacity = "^8.5.0"
numpy = "^1.26.4"
stringcase = "^1.2.0"
docker = "^7.1.0"
requests = "^2.32.0"
filetype = "^1.2"

# drivers
cohere = { version = "^5.5.4", optional = true }
anthropic = { version = ">=0.29,<0.35", optional = true }
transformers = { version = "^4.41.1", optional = true, extras=["torch"] }
huggingface-hub = { version = ">=0.24,<0.26", optional = true }
boto3 = { version = "^1.34.119", optional = true }
snowflake-sqlalchemy = { version = "^1.6.1", optional = true }
pinecone-client = { version = "^3", optional = true }
pymongo = { version = "^4.8.0", optional = true }
marqo = { version = "^3.7.0", optional = true }
redis = { version = "^4.6.0", optional = true }
opensearch-py = { version = "^2.3.1", optional = true }
pgvector = { version = ">=0.2.3,<0.4.0", optional = true }
psycopg2-binary = { version = "^2.9.9", optional = true }
google-generativeai = { version = ">=0.7.2,<0.9.0", optional = true }
trafilatura = {version = "^1.6", optional = true}
playwright = {version = "^1.42", optional = true}
beautifulsoup4 = {version = "^4.12.3", optional = true}
markdownify = {version = ">=0.11.6,<0.14.0", optional = true}
voyageai = {version = "^0.2.1", optional = true}
elevenlabs = {version = "^1.1.2", optional = true}
qdrant-client = { version = "^1.10.1", optional = true }
astrapy = { version = "^1.4", optional = true }
pusher = {version = "^3.3.2", optional = true}
ollama = {version = "^0.3.0", optional = true} 
duckduckgo-search = {version = "^6.2.12", optional = true}
sqlalchemy = {version = "^2.0.31", optional = true}
opentelemetry-sdk = {version = "^1.25.0", optional = true}
opentelemetry-api = {version = "^1.25.0", optional = true}
opentelemetry-instrumentation = {version = "^0.46b0", optional = true}
opentelemetry-instrumentation-threading = {version = "^0.46b0", optional = true}
opentelemetry-exporter-otlp-proto-http = {version = "^1.25.0", optional = true}
diffusers = {version = ">=0.29.1,<0.31.0", optional = true}
accelerate = {version = ">=0.32.1,<0.35.0", optional = true}
sentencepiece = {version = "^0.2.0", optional = true}
torch = {version = "^2.3.1", optional = true}
tavily-python = {version = "^0.5.0", optional = true}

# loaders
pandas = {version = "^1.3", optional = true}
pypdf = {version = "^3.9", optional = true}
pillow = {version = "^10.2.0", optional = true}
mail-parser = {version = "^3.15.0", optional = true}

[tool.poetry.extras]
drivers-prompt-cohere = ["cohere"]
drivers-prompt-anthropic = ["anthropic"]
drivers-prompt-huggingface-hub = ["huggingface-hub", "transformers"]
drivers-prompt-huggingface-pipeline = ["transformers"]
drivers-prompt-amazon-bedrock = ["boto3", "anthropic"]
drivers-prompt-amazon-sagemaker = ["boto3", "transformers"]
drivers-prompt-google = ["google-generativeai"]
drivers-prompt-ollama = ["ollama"]

drivers-sql = ["sqlalchemy"]
drivers-sql-amazon-redshift = ["boto3"]
drivers-sql-snowflake = ["sqlalchemy", "snowflake-sqlalchemy", "snowflake"]

drivers-memory-conversation-amazon-dynamodb = ["boto3"]
drivers-memory-conversation-redis = ["redis"]

drivers-vector-marqo = ["marqo"]
drivers-vector-pinecone = ["pinecone-client"]
drivers-vector-mongodb = ["pymongo"]
drivers-vector-redis = ["redis"]
drivers-vector-opensearch = ["opensearch-py"]
drivers-vector-amazon-opensearch = ["opensearch-py", "boto3"]
drivers-vector-pgvector = ["sqlalchemy", "pgvector", "psycopg2-binary"]
drivers-vector-qdrant = ["qdrant-client"]
drivers-vector-astra-db = ["astrapy"]

drivers-embedding-amazon-bedrock = ["boto3"]
drivers-embedding-amazon-sagemaker = ["boto3"]
drivers-embedding-huggingface = ["huggingface-hub", "transformers"]
drivers-embedding-voyageai = ["voyageai"]
drivers-embedding-google = ["google-generativeai"]
drivers-embedding-cohere = ["cohere"]
drivers-embedding-ollama = ["ollama"]

drivers-web-scraper-trafilatura = ["trafilatura"]
drivers-web-scraper-markdownify = ["playwright", "beautifulsoup4", "markdownify"]

drivers-web-search-duckduckgo = ["duckduckgo-search"]
drivers-web-search-tavily = ["tavily-python"]

drivers-event-listener-amazon-sqs = ["boto3"]
drivers-event-listener-amazon-iot = ["boto3"]
drivers-event-listener-pusher = ["pusher"]

drivers-text-to-speech-elevenlabs = ["elevenlabs"]

drivers-rerank-cohere = ["cohere"]

drivers-observability-opentelemetry = [
    "opentelemetry-sdk",
    "opentelemetry-api",
    "opentelemetry-instrumentation",
    "opentelemetry-instrumentation-threading",
    "opentelemetry-exporter-otlp-proto-http",
]
drivers-observability-griptape-cloud = [
    "opentelemetry-sdk",
    "opentelemetry-api",
    "opentelemetry-instrumentation",
    "opentelemetry-instrumentation-threading",
    "opentelemetry-exporter-otlp-proto-http",
]
drivers-observability-datadog = [
    "opentelemetry-sdk",
    "opentelemetry-api",
    "opentelemetry-instrumentation",
    "opentelemetry-instrumentation-threading",
    "opentelemetry-exporter-otlp-proto-http",
]

drivers-image-generation-huggingface = [
    "diffusers",
    "accelerate",
    "sentencepiece",
    "torch",
    "pillow",
]

loaders-pdf = ["pypdf"]
loaders-image = ["pillow"]
loaders-email = ["mail-parser"]
loaders-sql = ["sqlalchemy"]

all = [
    # drivers
    "cohere",
    "anthropic",
    "hugginface-hub",
    "transformers",
    "sqlalchemy",
    "boto3",
    "snowflake-sqlalchemy",
    "snowflake",
    "marqo",
    "pinecone-client",
    "qdrant-client",
    "astrapy",
    "pymongo",
    "redis",
    "opensearch-py",
    "pgvector",
    "psycopg2-binary",
    "google-generativeai",
    "trafilatura",
    "playwright",
    "beautifulsoup4",
    "markdownify",
    "voyageai",
    "elevenlabs",
    "pusher",
    "ollama",
    "duckduckgo-search",
    "tavily-python",
    "opentelemetry-sdk",
    "opentelemetry-api",
    "opentelemetry-instrumentation",
    "opentelemetry-instrumentation-threading",
    "opentelemetry-exporter-otlp-proto-http",
    "diffusers",
    "accelerate",
    "sentencepiece",
    "torch",
    "pillow",

    # loaders
    "pandas",
    "pypdf",
    "mail-parser",
]

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.3.1"
pytest-mock = "^3.1.4"
mongomock = "^4.1.2"

twine = "^5.1.1"
moto = {extras = ["dynamodb", "iotdata", "sqs"], version = "^4.2.13"}
pytest-xdist = "^3.3.1"
pytest-cov = "^5.0.0"
pytest-env = "^1.1.1"
fuzzywuzzy = "^0.18.0"
pytest-clarity = "^1.0.1"


[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ruff = "^0.6.0"
pyright = "^1.1.376"
pre-commit = "^3.7.1"
boto3-stubs = {extras = ["bedrock", "iam", "opensearch", "s3", "sagemaker", "sqs", "iot-data", "dynamodb", "redshift-data"], version = "^1.34.105"}
typos = "^1.22.9"


[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.2"
mkdocs-material = "^9.2.8"
mkdocs-glightbox = ">=0.3.4,<0.5.0"
mkdocstrings = {extras = ["python"], version = ">=0.25.2,<0.27.0"}
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-section-index = "^0.3.6"
pymdown-extensions = "^10.3"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "F", # pyflakes
    "E", # pycodestyle-errors
    "W", # pycodestyle-warnings
    "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "FBT", # flake8-boolean-trap
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "FA", # flake8-future-annotations
    "LOG", # flake8-logging
    "G", # flake8-logging-format
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "FURB", # refurb
]
ignore = [
    "UP007", # non-pep604-annotation
    "E501", # line-too-long
    "B024", # abstract-base-class-without-abstract-method
    "B009", # get-attr-with-constant
    "B010", # set-attr-with-constant
    "D100", # undocumented-public-module
    "D101", # undocumented-public-class
    "D102", # undocumented-public-method
    "D103", # undocumented-public-function
    "D104", # undocumented-public-package
    "D105", # undocumented-magic-method
    "D106", # undocumented-public-nested-class
    "D107", # undocumented-public-init
    "COM812", # missing-trailing-comma -- See https://github.com/astral-sh/ruff/issues/9216 
    "ANN002", # missing-type-args
    "ANN003", # missing-type-kwargs
    "ANN101", # missing-type-self
    "ANN102", # missing-type-cls
    "ANN401", # any-type
    "PT011", # pytest-raises-too-broad
    "RET505" # superfluous-else-return
]
[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "I" # isort
]
"tests/*" = [
    "ANN001", # missing-type-function-argument
    "ANN201", # missing-return-type-undocumented-public-function
    "ANN202", # missing-return-type-private-function
]
"docs/*" = [
    "T20" # flake8-print
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"attr".msg = "The attr module is deprecated, use attrs instead."

[tool.pyright]
venvPath = "."
venv = ".venv"
include = ["griptape"]
exclude = [
    "**/__pycache__",
]
pythonVersion = "3.9"
reportOptionalMemberAccess = "none"
reportIncompatibleVariableOverride = "none" # see thread: https://github.com/microsoft/pyright/issues/5933 
enableExperimentalFeatures = true # https://github.com/microsoft/pyright/issues/7713

[tool.pytest_env]
OPENAI_API_KEY = {value = "api-key", skip_if_set = true}
AZURE_OPENAI_API_KEY = { value = "api-key", skip_if_set = true}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
